<?php
  /**
   * App Controller, father of all controllers
   * 
   * This controller defines application-wide features used in multiple 
   * controllers.
   * Functions defined here and methods called in beforeFilter are inherited in
   * other controllers and available there. 
   *
   * See documentation below for app-wide systems: Auth, Tabs
   */
class AppController extends Controller
{
    /**
     * Name of a session variable that holds a key to hopefully thwart 
     * cross-site request forgeries.  
     */
    const ID_KEY = 'AppController_id';

    /**
     * Cake version of the session variable to match ID_KEY
     */
    /* This name works for use in Cake form->hidden function calls, 
       because Cake parses the name and removes the period
     */
    const CAKEID_KEY = 'AppController.AppController_id';

    /** Name of a form variable that should match ID_KEY. 
     */
    /* This should be what Cake turns the ID_KEY into.  Useful for
     * forms that aren't generated by Cake
     */
    const FORMID_KEY = 'data[AppController][AppController_id]';

    /**
      Message indicating a user's session has expired.
     */
    const SESSION_EXPIRED_MESSAGE = 'Your session has timed out.';

    var $uses = array('Log', 'User');
    var $helpers = array('Javascript', 'Html');
    var $components = array('Security', 'RequestHandler', 'DhairAuth');

    /** The name of the authorized user */
    protected $authUsername;

    /** The db record of the authorized user */
    protected $authUser;

    /**
     * Write an action to the log
     * @param userid Id of the user performing the action
     * @param actionPrefix Prefix to add to the action field
     */
    private function logAction($userid, $actionPrefix = '') {
        $c = $this->params['controller'];
        $a = $this->params['action'];

        /* merge all parameters (Cake url params, POST form params, named, 
           and the standard name=val&name2=val2 */
        $p = $this->params['pass'];

        if ($this->RequestHandler->isPost()) {
            if ($c == 'events' && strpos($a, 'review') === 0) {
                $d = 'reviews';
            } 

            /* get portion of $this->data pertaining to the object we're 
               working on.  PHP functions below will change controller name 
               like so: 'events' => 'Event' */
            $d = $this->data[substr(ucfirst($c), 0, -1)];

            if (!empty($d)) {
                foreach ($d as $key => $value) {
                    $p[] = "$key=>" . print_r($value,true);
                }
            }

            if ($c == 'events' && strpos($a, 'assign') === 0 && 
                !empty($this->data['Assign']))
            {
                foreach ($this->data['Assign'] as $key => $value) {
                    $p[] = "$key=>" . print_r($value,true);
                }
            }

            foreach ($this->params['form'] as $key => $value) {
                $p[] = "$key=>$value";
            }
        }

        foreach ($this->params['named'] as $key => $value) {
            $p[] = "$key:$value";
        }

        foreach ($this->params['url'] as $key => $value) {
            if ($key != 'url' && $key != self::ID_KEY) {
                $p[] = "$key=$value";
            }
        }

        $log['Log'] = array(
            'user_id'     =>  $userid,
            'controller'  =>  strip_tags($c),
            'action'      =>  strip_tags($actionPrefix . $a),
            'params'      =>  strip_tags(implode(",", $p)),
            'time'        =>  gmdate("Y-m-d G-i-s")
        );

        $this->Log->create();
        $this->Log->save($log);
    }

    function beforeFilter() {
        $this->Security->requireSecure();
        $remoteUser = env('REMOTE_USER');
//        $remoteUser = '';

        if (empty($remoteUser)) {
            $eppn = env('eppn');
$this->log("No remoteUser; using eppn: $eppn");
$this->log(print_r($_SERVER, true));
$this->log(print_r($_REQUEST, true));
$this->log(print_r($GLOBALS, true));

            if (empty($eppn)) {
                $this->log("No username");
                $this->cakeError('unknownUser', 
                                 array('authUsername' => 'No username'));
            } else {
                $this->authUsername = $eppn;
            }
        } else {
            $this->authUsername = $remoteUser;
        }

        if ($this->params['action'] != 'nologin') {
            $this->authUser = $this->User->findByLogin($this->authUsername);
            $userid = $this->authUser['User']['id'];

            if (empty($userid)) {
                $this->log("Unknown user: {$this->authUsername}");
                $this->cakeError('unknownUser', 
                                 array('authUsername' => $this->authUsername));
            } else if (!$this->DhairAuth->authorized($this->authUser)) {
                $this->log("Unauthorized access of {$this->params['controller']}
                           /{$this->params['action']} by 
                           {$this->authUsername}");
               
                if (!defined('CAKEPHP_UNIT_TEST_EXECUTION')) {
                     $this->cakeError('notAuthorized',
                         array('authUsername' => $this->authUsername,
                               'params' => $this->params));
                }
            }

            if (!defined('CAKEPHP_UNIT_TEST_EXECUTION')) {
                $this->logAction($userid);
            }

            $this->set('authUsername', $this->authUsername);
            $this->set('authUser', $this->authUser);
        }

        if (!defined('CAKEPHP_UNIT_TEST_EXECUTION')) {
            // Fail if there's a possible Cross-site Request forgery
            if ($this->DhairAuth->possibleXsrf()) {
                if ($this->RequestHandler->isAjax()) {
                    // just fail if it's ajax
                    $this->exit();
                } else {
                    /* give them a generic, possibly misleading message; one can
                       get here legitimately if the session did expire */
                    $this->Session->setFlash(
                                AppController::SESSION_EXPIRED_MESSAGE);
                    $this->redirect('/events/');
                }
            }
        }

        /* save a key we can use to make cross-site request forgeries
           less likely */
        $idKey = $this->Session->read(self::ID_KEY);

        if (empty($idKey)) {
            $this->Session->write(self::ID_KEY, mt_rand());
$this->log("users.login " . $this->Session->read(self::ID_KEY) . " " . $this->authUsername);
        }
    }

    function afterFilter() {
        if (empty($this->authUser) || empty($this->authUser['User']['id'])) {
            $userid = -1;
        } else {
            $userid = $this->authUser['User']['id'];
        }

        if (!defined('CAKEPHP_UNIT_TEST_EXECUTION')) {
            $this->logAction($userid, 'end ');
        }
    }

    /**
     * Override redirect to do nothing if we're testing (so that controller
     * tests work
     */
    function _stop($status = 0) {
        if (!defined('CAKEPHP_UNIT_TEST_EXECUTION')) {
            parent::_stop($status);
        }
    }

    /**
     * Override redirect to do nothing if we're testing (so that controller
     * tests work
     */
    function redirect($url, $status = null, $exit = true) {
        if (!defined('CAKEPHP_UNIT_TEST_EXECUTION')) {
            parent::redirect($url, $status, $exit);
        }
    }

    /**
     * Set a flash message indicating something succeeded
     * @param message The message
     */
    protected function setSuccessMessage($message) {
        $this->Session->setFlash($message, 'default', 
            array('class' => 'successMessage'), 'success');
    }
}
